import sys
sys.stdin = open('DFS연습_input.txt')

# 비선형구조인 그래프 구조는 그래프로 표현된 모든 자료를 빠짐없이 검색하는 것이 중요.
# 깊이 탐색.
# 시작 정점의 한 방향으로 갈 수 있는 경로가 있는 곳까지 깊이 탐색해 가다가
# 더 이상 갈 곳이 없게 되면, 가장 마지막에 만났던 갈림길 간선이 있는
# 정점으로 되돌아와서 다른 방향의 정점으로 탐색을 계속 반복하여 결국 모든 정점을 방문순회함.
# 가장 마지막에 만났던 갈림길의 정점으로 되돌아가서 다시 깊이 우선 탐색을 반복해야하므로 후입선출 스택구조 적합

# 알고리즘 작성 순서
# 1. 시작 정점 v를 결정하여 방문한다.
# 2. 정점 v에 인접한 정점중에서
#   - 방문하지 않은 정점 w가 있으면, 정점 v를 스택에 push하고 정점 w를 방문한다. 그리고 w를 v로 하여 다시 2번을 반복
#   - 방문하지 않은 정점이 없으면, 탐색의 방향을 바꾸기 위해서 스택을 pop하여 받은 가장 마지막 방문 정점을 v로 하여 다시 2번을 반복
# 스택이 공백이 될 때까지 2번을 반복.

def DFS(v):
    S = []
    visit = [False] * (V+1)
    visit[v] = True
    S.append(v)

    while S:
        for w in G[v]:
            if not visit[w]:
                visit[w] = True
                S.append(v)
                v = w
                break
        else:
            v = S.pop()


V, E = map(int, input().split())

G = [[] for _ in range(V+1)]




